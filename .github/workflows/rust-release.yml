# Simplified release workflow:
# - Triggered when an old/local-release-* backup branch is pushed.
# - Builds Windows (x86_64 & ARM64) and Android (ARM64) binaries.
# - Publishes a prerelease on GitHub; no npm/Homebrew steps, no manual tags.

name: rust-release

on:
  push:
    branches:
      - "old/local-release-*"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: Build - ${{ matrix.runner }} - ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30
    defaults:
      run:
        working-directory: codex-rs
    strategy:
      fail-fast: false
      matrix:
        include:
#          - runner: windows-latest
#            target: x86_64-pc-windows-msvc
#            build_codex_responses: true
#          - runner: windows-11-arm
#            target: aarch64-pc-windows-msvc
#            build_codex_responses: true
          - runner: ubuntu-24.04
            target: aarch64-linux-android
            build_codex_responses: false
            android: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.90
        with:
          targets: ${{ matrix.target }}

      - name: Ensure target installed
        run: rustup target add ${{ matrix.target }}

      - name: Restore cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ${{ github.workspace }}/codex-rs/target/
          key: cargo-${{ matrix.runner }}-${{ matrix.target }}-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Android NDK
        if: ${{ matrix.android }}
        id: setup-android
        uses: android-actions/setup-android@v3
        with:
          packages: "tools platform-tools ndk;26.1.10909125"

      - name: Configure Android toolchain
        if: ${{ matrix.android }}
        shell: bash
        run: |
          set -euo pipefail
          ndk_path="${{ steps.setup-android.outputs.ndk-path }}"
          clang_bin="$ndk_path/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "ANDROID_NDK_HOME=$ndk_path" >> "$GITHUB_ENV"
          echo "CC_aarch64_linux_android=$clang_bin/aarch64-linux-android23-clang" >> "$GITHUB_ENV"
          echo "CXX_aarch64_linux_android=$clang_bin/aarch64-linux-android23-clang++" >> "$GITHUB_ENV"
          echo "AR_aarch64_linux_android=$clang_bin/llvm-ar" >> "$GITHUB_ENV"
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$clang_bin/aarch64-linux-android23-clang" >> "$GITHUB_ENV"
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_AR=$clang_bin/llvm-ar" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> "$GITHUB_ENV"

      - name: Install packaging tools (Linux)
        if: ${{ matrix.runner == 'ubuntu-24.04' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y zstd tar

      - name: Install zstd (Windows)
        if: ${{ contains(matrix.runner, 'windows') }}
        shell: powershell
        run: choco install -y zstandard

      - name: Cargo build
        if: ${{ !matrix.android }}
        run: cargo build --target ${{ matrix.target }} --release --bin codex --bin codex-responses-api-proxy

      - name: Cargo build (Android)
        if: ${{ matrix.android }}
        run: cargo build --target ${{ matrix.target }} --release --bin codex

      - name: Stage artifacts
        shell: bash
        run: |
          set -euo pipefail
          dest="dist/${{ matrix.target }}"
          mkdir -p "$dest"

          if [[ "${{ matrix.runner }}" == windows* ]]; then
            cp "target/${{ matrix.target }}/release/codex.exe" "$dest/codex-${{ matrix.target }}.exe"
            if [[ "${{ matrix.build_codex_responses }}" == 'true' ]] && [[ -f "target/${{ matrix.target }}/release/codex-responses-api-proxy.exe" ]]; then
              cp "target/${{ matrix.target }}/release/codex-responses-api-proxy.exe" "$dest/codex-responses-api-proxy-${{ matrix.target }}.exe"
            fi
          else
            cp "target/${{ matrix.target }}/release/codex" "$dest/codex-${{ matrix.target }}"
            if [[ "${{ matrix.build_codex_responses }}" == 'true' ]] && [[ -f "target/${{ matrix.target }}/release/codex-responses-api-proxy" ]]; then
              cp "target/${{ matrix.target }}/release/codex-responses-api-proxy" "$dest/codex-responses-api-proxy-${{ matrix.target }}"
            fi
          fi

      - name: Compress artifacts
        shell: bash
        run: |
          set -euo pipefail
          dest="dist/${{ matrix.target }}"

          for f in "$dest"/*; do
            base="$(basename "$f")"
            if [[ "$base" == *.tar.gz || "$base" == *.zip ]]; then
              continue
            fi

            tar -C "$dest" -czf "$dest/${base}.tar.gz" "$base"

            if [[ "${{ matrix.runner }}" == windows* ]]; then
              (cd "$dest" && 7z a "${base}.zip" "$base") > /dev/null
            fi

            zstd -T0 -19 --rm "$dest/$base"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: codex-rs/dist/${{ matrix.target }}/*

  release:
    name: Create prerelease
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Show artifact layout
        run: ls -R dist/

      - name: Determine release metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          ref_name="${GITHUB_REF_NAME}"
          short_sha="$(git rev-parse --short HEAD)"
          sanitized="$(echo "$ref_name" | tr '/ ' '--')"
          tag="branch-release-${sanitized}-${short_sha}"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "name=$ref_name" >> "$GITHUB_OUTPUT"

      - name: Publish GitHub prerelease
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          target_commitish: ${{ github.sha }}
          name: ${{ steps.meta.outputs.name }}
          prerelease: true
          files: dist/**
